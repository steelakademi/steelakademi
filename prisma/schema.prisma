// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("MEMBER")
  branch        String?   // Şube bilgisi
  salesSource   String?   // Satış kaynağı
  points        Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  videoViews    VideoView[]
  questions     Question[]
  answers       Answer[]
  blogPosts     BlogPost[]
  announcements Announcement[]
  notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id          String      @id @default(cuid())
  title       String
  description String?
  url         String
  thumbnail   String?
  duration    Int?        // saniye cinsinden
  category    String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  views VideoView[]
}

model VideoView {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  watchedAt DateTime @default(now())
  progress  Float    @default(0) // 0-100 arası yüzde
  points    Int      @default(0)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  excerpt   String?
  category  String?
  authorId  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Question {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String?
  authorId  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author  User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  answers Answer[]
}

model Answer {
  id         String   @id @default(cuid())
  content    String
  authorId   String
  questionId String
  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  isActive  Boolean  @default(true)
  priority  String   @default("NORMAL")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // video, blog, announcement, question
  title     String
  message   String
  userId    String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
} 